import socket
import threading
import sqlite3
from database import initialize_db

def handle_client(client_socket):
    conn = sqlite3.connect('classroom_reservation.db')
    c = conn.cursor()
    
    try:
        while True:
            request = client_socket.recv(1024).decode()
            if not request:
                break
            
            command, *args = request.split()
            
            if command == "reserve":
                classroom_id, date, start_time, end_time = args
                c.execute('''
                    INSERT INTO reservations (classroom_id, date, start_time, end_time)
                    VALUES (?, ?, ?, ?)
                ''', (classroom_id, date, start_time, end_time))
                conn.commit()
                client_socket.send("Reservation successful".encode())
                
            elif command == "availability":
                classroom_id, date = args
                c.execute('''
                    SELECT * FROM reservations
                    WHERE classroom_id = ? AND date = ?
                ''', (classroom_id, date))
                reservations = c.fetchall()
                response = "\n".join([str(res) for res in reservations])
                client_socket.send(response.encode())
            
            elif command == "list":
                c.execute('SELECT * FROM reservations')
                reservations = c.fetchall()
                response = "\n".join([str(res) for res in reservations])
                client_socket.send(response.encode())
                
            else:
                client_socket.send("Unknown command".encode())
    
    except Exception as e:
        client_socket.send(f"Error: {str(e)}".encode())
    
    finally:
        client_socket.close()
        conn.close()

def start_server():
    initialize_db()
    
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', 9999))
    server.listen(5)
    print("Server started on port 9999")
    
    while True:
        client_socket, addr = server.accept()
        print(f"Accepted connection from {addr}")
        client_handler = threading.Thread(target=handle_client, args=(client_socket,))
        client_handler.start()

if name == "main":
    start_server()
